@page "/zadanie"
@rendermode InteractiveServer

<MyMudProviders />

<PageTitle>Zadanie</PageTitle>

<MudDropContainer T="DropItem" Items="_items" ItemIsDisabled="@( (item) => item.Disabled)" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" ItemPicked="ItemPicked" Class="d-flex flex-wrap h-screen">
    <ChildContent>
        <MudGrid>
            <MudPaper>
                <MudList Clickable="true" Class="d-flex flex-column">
                    <MudListSubheader>Użytkownicy</MudListSubheader>
                    <MudDropZone T="DropItem" Identifier="0" Class="flex-grow-1" />
                </MudList>
                <MudPaper>
                    <MudStack Class="overflow-y-scroll">
                        @for(int i = Logs.Count - 1; i >= 0; --i)
                        {
                            int index = i;
                            <MudChip Class="justify-start" Icon="@GetIcon(Logs[index].ContainerIndex)" Variant="Variant.Text" Color="Color.Primary">@CreateLogMessage(Logs[index].Item, Logs[index].ContainerIndex, Logs[index].Action)</MudChip>
                        }
                    </MudStack>
                </MudPaper>
            </MudPaper>
            <MudTabs Outlined="true">
                <MudTabPanel Text="Grupa 1" Icon="@Icons.Material.Filled.Star">
                    <ChildContent>
                        <MudPaper Class="flex-grow-1">
                            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                                <MudDropZone T="DropItem" Identifier="1" Class="flex-grow-1" AllowReorder="true" />
                             </MudList>
                        </MudPaper>
                    </ChildContent>
                </MudTabPanel>
                <MudTabPanel Text="Grupa 2" Icon="@Icons.Material.Filled.Square">
                    <ChildContent>
                        <MudPaper Class="flex-grow-1">
                            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                                <MudDropZone T="DropItem" Identifier="2" Class="flex-grow-1" AllowReorder="true" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                </MudTabPanel>
                <MudTabPanel Text="Grupa 3" Icon="@Icons.Material.Filled.InsertEmoticon">
                    <ChildContent>
                        <MudPaper Class="flex-grow-1">
                            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                                <MudDropZone T="DropItem" Identifier="3" Class="flex-grow-1" AllowReorder="true" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                </MudTabPanel>
                <MudTabPanel Text="Grupa 4" Icon="@Icons.Material.Filled.Circle">
                    <ChildContent>
                        <MudPaper Class="flex-grow-1">
                            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                                <MudDropZone T="DropItem" Identifier="4" Class="flex-grow-1" AllowReorder="true" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                </MudTabPanel>
                <MudTabPanel Text="Grupa 5" Icon="@Icons.Material.Filled.ChangeHistory">
                    <ChildContent>
                        <MudPaper Class="flex-grow-1">
                            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                                <MudDropZone T="DropItem" Identifier="5" Class="flex-grow-1" AllowReorder="true" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                </MudTabPanel>
            </MudTabs>
        </MudGrid>
    </ChildContent>
    <ItemRenderer>
        <MudMenu ActivationEvent="@MouseEvent.RightClick" >
            <ActivatorContent>
                <MudListItem Style="@(SelectedItems.Contains(context.Id) ? "opacity: 0.5" : string.Empty)" Text="@context.Name" Icon="@(context.Disabled ? Icons.Material.Filled.Close : Icons.Material.Filled.Check)" OnClick="(args) => OnSelect(args, context.Id)" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Class="mud-list-h-unset">
                    <MudCheckBox @bind-Value="@context.Disabled">Zablokuj pozycję użytkownika</MudCheckBox>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        if (dropItem.DropzoneIdentifier == previousContainerIndex)
        {
            return;
        }

        if (!SelectedItems.Contains(dropItem.Item.Id))
        {
            SelectedItems.Add(dropItem.Item.Id);
        }

        IEnumerable<DropItem> dropItems = _items.Where(item => SelectedItems.Contains(item.Id));

        foreach (DropItem item in dropItems)
        {
            if (dropItem.DropzoneIdentifier == item.Selector)
            {
                return;
            }

            if (item.Selector != "0")
            {
                Logs.Add(new LogItem(item, previousContainerIndex, ActionType.Removed));
            }

            item.Selector = dropItem.DropzoneIdentifier;

            if (dropItem.DropzoneIdentifier != "0")
            {
                Logs.Add(new LogItem(item, dropItem.DropzoneIdentifier, ActionType.Added));
            }
        }

        SelectedItems.Clear();
    }

    private void ItemPicked(MudDragAndDropItemTransaction<DropItem> dropItem)
    {
        previousContainerIndex = dropItem.SourceZoneIdentifier;
    }

    private void OnSelect(MouseEventArgs args, int id)
    {
        if (!args.ShiftKey)
        {
            return;
        }

        DropItem? item = _items.FirstOrDefault(item => item.Id == id);

        if (item is null || item.Disabled)
        {
            return;
        }

        if (SelectedItems.Contains(id))
        {
            SelectedItems.Remove(id);

            return;
        }

        SelectedItems.Add(id);
    }

    private List<int> SelectedItems = new();

    private List<DropItem> _items = new()
    {
        new DropItem(){ Id = 1, Name = "Jan Kowalski", Sex = Sex.Male, Selector = "0" },
        new DropItem(){ Id = 2, Name = "Anna Nowak", Sex = Sex.Female, Selector = "0" },
        new DropItem(){ Id = 3, Name = "Janina Adamiak", Sex = Sex.Female, Selector = "0", Disabled = true },
        new DropItem(){ Id = 4, Name = "Nieznany", Sex = Sex.Other, Selector = "0" },
        new DropItem(){ Id = 5, Name = "Krzysztof Zen", Sex = Sex.Male, Selector = "0" },
    };

    private List<LogItem> Logs = new();

    private string previousContainerIndex = string.Empty;

    private class DropItem
    {
        public int Id { get; init; }
        public string Name { get; init; }
        public Sex Sex { get; init; }
        public string Selector { get; set; }
        public bool Disabled { get; set; } = false;
    }

    private record LogItem(DropItem Item, string ContainerIndex, ActionType Action);

    private string CreateLogMessage(DropItem item, string containerIndex, ActionType action)
    {
        return $"Użytkownik {item.Name} {StringHelpers.CreateActionTypeMessage(action, item.Sex)} grupy {containerIndex}!";
    }

    private string GetIcon(string containerIndex)
    {
        switch(containerIndex)
        {
            case "1":
                return Icons.Material.Filled.Star;
            case "2":
                return Icons.Material.Filled.Square;
            case "3":
                return Icons.Material.Filled.InsertEmoticon;
            case "4":
                return Icons.Material.Filled.Circle;
            case "5":
                return Icons.Material.Filled.ChangeHistory;
            default:
                return Icons.Material.Filled.Dangerous;                
        }
    }
}